#############################################################################
#						Midas configuration file							#
#############################################################################

[Midas]
# Directory with data files. The data files need to be ordered by time-shift amount, most shifted last
# (e.g. data.txt, data+30min.txt, data+60min.txt, data+90min.txt).
# Only positive time shifts allowed.
# Default: 1H
midas.dataFilePath 			= MidasTrainingSuite/data/4H/

# Number of indicator sets to use (so not just EMA but also PPO). The same number of data files need to be present in the data directory.
midas.numberOfEMAs 			= 4
# Amount of starting USD/BTC for the simulation.
midas.startingUSD 			= 0.0
midas.startingBTC 			= 10.0
# Trading fee (percentage). Applied as a flat fee without taking trading volume into account.
midas.tradingFee 			= 0.6
# Slippage correction (percentage). Applied on top of the trading fee, to correct for slippage that inevitably occurs in a real-world situation. 
# The best values for fees and correction depends on trading amount. Note that different percentages will lead to different optimal parameters
# (the higher the fees, the more the algorithm will tend to more conservative parameters leading to a lower number of trades made).
midas.slippageCorrection	= 0.28

# Buy/sell difference thresholds between short and long EMAs. EMA parameters are currently fixed to 21/10.
# Default: 0.05/-0.70 (neutral), 0.00/-0.70 (high-volume/low-frequency (few trades)), 0.00/-0.70 (low-volume/high-frequency (many trades))
midas.emaBuyThreshold		= 0.00
midas.emaSellThreshold		= -0.70
# Number of time-shifted EMAs that need to be past the buy/sell thresholds for the trade to be executed. Default: 4
midas.minEMAConfirmations 	= 4

# Buy/sell speed thresholds for crosses between the PPO line and its signal line. PPO/signal parameters are currently fixed to 12/26/9.
# This speed is defined as the absolute value of {previous tick PPO value} - {current tick PPO value}.
# This conditional is based on the assumption that sudden mass buying/selling is likely to lead to a short or long term trend change.
# Checking for a PPO cross allows us to react quicker than waiting for an EMA signal to trigger.
# The threshold is in place to filter out false signals.
# Furthermore, if this signal has triggered and the PPO line crosses again in the opposite direction at any speed
# while the slower EMA has not given the same buy/sell signal yet, we consider the signal was false, take the loss and buy/sell back again.
# Default: 0.75/0.35 (neutral), 0.75/0.50 (high-volume/low-frequency (few trades)), 0.75/0.35 (low-volume/high-frequency (many trades))
midas.ppoBuyCrossSpeed		= 0.75
midas.ppoSellCrossSpeed		= 0.50

# Backup for the above indicator in case the cross has already occurred - a sudden PPO drop/rise while the PPO line has *already* crossed its signal line.
# Default: 1.10/0.70 (neutral), 1.15/1.40 (high-volume/low-frequency (few trades)), 0.75/0.70 (low-volume/high-frequency (many trades))
midas.ppoBuySpeed			= 1.90
midas.ppoSellSpeed			= 1.40

# Buy/sell speed thresholds for extreme PPO movement ({previous tick PPO value} - {current tick PPO value}), regardless of crosses with its signal line.
# We take to opposite action of the above PPO cross conditionals: we buy if PPO dives at a speed higher than ppoBuyReboundSpeed, and sell if PPO rises at a speed higher than ppoSellReboundSpeed.
# The intuition behind this is that such extreme price movements are more often than not unsustainable, and will result in a rebound.
# After this conditional triggers a buy resp. sell, a sell resp. buy will be triggered in the next tick of the CURRENT indicator
# (time shifted indicators are ignored: given 4 indicators, the next 3 are skipped).
# Default: 1.30/1.10 (neutral), 1.30/1.70 (high-volume/low-frequency (few trades)), 1.30/0.75 (low-volume/high-frequency (many trades))
midas.ppoBuyReboundSpeed	= 1.30
midas.ppoSellReboundSpeed	= 1.70

# Format: [yyyy d/m]. The date needs to exist in the data files.
midas.startDate				= 2012 1/7
midas.endDate				= 2013 1/9

#===========================================================================

[TrainingSuite]
#######################################################################################################################################################
# Training mode: train the model by running the algorithm multiple times, over a range of parameters, within given time periods.
# For each time period, a ranking is made that orders each parameter combination from most profitable to least profitable
# (the most profitable combination gets rank 1, the second most profitable rank 2, etc.).
# Optimizing the parameters over a single time period (i.e. the full 14 months of past data) gives the best results but is the least likely
# to yield profitable results in the future (overfitting to the existing data set). Therefore, we arrive at the ideal parameters as follows:
#
# 1. The data is split up in a number of smaller periods of a defined length (2-month periods by default)
# 2. For each time period, we rank the trading results for each possible parameter combination over this period according to profitability.
#    Combinations are tested by hill climbing (several rounds of trial & error, with decreasing step for each round).
#    This method is not ideal as you very quickly get stuck in a local optimum; a better optimization method is TODO.
# 3. We end up with a ranking where every parameter combination for each time period is assigned a rank.
# 4. For each unique parameter combination, we sum the ranking values obtained for each time period to obtain a cumulative ranking.
# 5. The parameter combination with the lowest cumulative rank is chosen as the ideal setting.
#
# No bias is added for actual profitability of time periods to avoid skewing the parameter selection in favor of anomalies such as the April bubble crash
# and its following extreme volatility. This will increase the overall likelihood that the algorithm will continue to be profitable in the future,
# as it has been shown to be the most likely to be profitable on average regardless of the current market situation.
# In the default case, we test over 14 months (Jul. 2012 to Sep. 2013), which includes various types of possible future market situations
# (low-volume lulls, slow run-ups, violent crashes, extreme volatility).
#
# Results (top ranking for each run, trades belonging to the highest ranked parameter combination) are recorded and viewable in the log file (Midas.log).
#######################################################################################################################################################

# 1 to enable the training suite mode, 0 to disable
trainingSuite.enabled 					= 1

# Run in optimization mode. If enabled we run the training suite {trainingSuite.optimizationRounds} times to hill-climb towards to optimum:
# first we find a rough indication for optimal parameters by testing with a large step.
# Parameters are then refined by running the training suite several times more by halving the step each time, 
# with Min-Max thresholds re-set resp. to {current best parameters} - step, {current best parameters} + step.
trainingSuite.optimization 				= 1
# Number of optimization rounds. We start with the current step, and divide this step by 2 for every subsequent round.
# Default: 4, with step = 0.4 (so we test 0.4, 0.2, 0.1 and 0.05)
trainingSuite.optimizationRounds 		= 4

# Test each value between each min and max with this step.
trainingSuite.step						= 0.4

# Ranges for each of the parameters. Be careful not to make the ranges too wide: 
# an exhaustive search is performed initially, so with 6 dimensions the problem becomes intractable fast. A better way is TODO
trainingSuite.emaBuyThresholdMin		= 0.00
trainingSuite.emaBuyThresholdMax		= 0.80
trainingSuite.emaSellThresholdMin		= -1.20
trainingSuite.emaSellThresholdMax		= 0.00

trainingSuite.ppoBuyCrossSpeedMin		= 0.00
trainingSuite.ppoBuyCrossSpeedMax		= 0.80
trainingSuite.ppoSellCrossSpeedMin		= 0.00
trainingSuite.ppoSellCrossSpeedMax		= 0.80

trainingSuite.ppoBuySpeedMin			= 0.40
trainingSuite.ppoBuySpeedMax			= 1.20
trainingSuite.ppoSellSpeedMin			= 0.40
trainingSuite.ppoSellSpeedMax			= 1.20

trainingSuite.ppoBuyReboundSpeedMin		= 1.00
trainingSuite.ppoBuyReboundSpeedMax		= 2.60
trainingSuite.ppoSellReboundSpeedMin	= 1.00
trainingSuite.ppoSellReboundSpeedMax	= 1.80


# Number of 'X'-month periods to train on (There are 14 months in the current data), to cross-validate the results.
# Example:	startXMonthPeriods = 2, endXMonthPeriods = 4:
# 			Train on all 2-month periods (Jul-Aug, Aug-Sep, etc.), 3-month periods (Jul-Sep, Aug-Oct, etc.) and 4-month periods available within the given startDate-endDate range.
trainingSuite.startXMonthPeriods		= 2
trainingSuite.endXMonthPeriods			= 2


############################################################################

# Log4j settings. No real need to touch this.
[Log4j]
log4j.rootLogger = INFO, X
#set the appender named X to be a console appender
log4j.appender.X=org.apache.log4j.ConsoleAppender
#set the layout for the appender X
log4j.appender.X.layout=org.apache.log4j.PatternLayout
log4j.appender.X.layout.conversionPattern=[%5p] %d{hh:mm:ss} (%F:%M:%L) %m%n
log4j.logger.MidasLogger=ALL, fileAppender
# File based log output
log4j.appender.fileAppender=org.apache.log4j.RollingFileAppender
log4j.appender.fileAppender.File=Midas.log
log4j.appender.fileAppender.MaxFileSize=10000KB
log4j.appender.fileAppender.Append=false
# Keep one backup file
log4j.appender.fileAppender.MaxBackupIndex=1
log4j.appender.fileAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.fileAppender.layout.ConversionPattern=[%5p] %d{hh:mm:ss} (%F:%M:%L) %m%n
